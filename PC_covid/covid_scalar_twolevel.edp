
// Sudhi P V
// Civil and Environmental Engineering
// Carleton University

//##################################################
// Simple DD code with square mesh
//##################################################


// Implementation of 5 compartment COVID Model as per ODEN Paper


bool debug = true;

load "PETSc"
macro dimension()2// EOM            // 2D or 3D
include "macro_ddm.idp"

real t1,t2;

t1 = mpiWtime();

// For solution output in vtk format
load "iovtk"
int[int] Order = [1]; // 1 - P1 lagrange elements 0 - P0

real T = getARGV("-T",0.1);
real deltaT = getARGV("-deltaT",0.1);

real nt = lround(T/deltaT);

if(mpirank == 0) cout << "T is " << T << " dt is " << deltaT << " nt is "<< nt << endl;


int level = 2;
int s = getARGV("-s",2);
func Pk = P1;                       // finite element space

mesh [int] Ths(level);
mesh [int] The(level);
mesh [int] Thi(level);
mesh [int] Thr(level);
mesh [int] Thd(level);

Ths[level-1] = square( getARGV("-m",80), getARGV("-n",80) );
The[level-1] = Ths[level-1];
Thi[level-1] = Ths[level-1];
Thr[level-1] = Ths[level-1];
Thd[level-1] = Ths[level-1];


Mat[int] S(level);
Mat[int] E(level);
Mat[int] I(level);
Mat[int] R(level);
Mat[int] D(level);

matrix[int] Ps(level - 1);
matrix[int] Pe(level - 1);
matrix[int] Pi(level - 1);
matrix[int] Pr(level - 1);
matrix[int] Pd(level - 1);

if(mpirank == 0) cout << "Number of Vertices in coarse grid " << "  " + Ths[level-1].nv << endl;


buildMatRecursive(Ths, s, level, Ps, S, Pk, mpiCommWorld);
buildMatRecursive(The, s, level, Pe, E, Pk, mpiCommWorld);
buildMatRecursive(Thi, s, level, Pi, I, Pk, mpiCommWorld);
buildMatRecursive(Thr, s, level, Pr, R, Pk, mpiCommWorld);
buildMatRecursive(Thd, s, level, Pd, D, Pk, mpiCommWorld);


if(mpirank == 0) cout << "Number of Vertices in fine mesh for process  "+ mpirank << "  " + Ths[0].nv << endl;


fespace Vh(Ths[0], Pk);

// Parameters

real NLfact = getARGV("-NLfact",2);

real A = 500.0;
real betaI = 3.78e-4;
real betaE = 3.78e-4;
real nuS = 3.94e-6;
real nuE = 3.94e-6;
real nuR = 3.94e-6;
real mu = 0.0;
real alpha = 0.0;
real gammaR = (1./24);
real gammaD = (1./160);
real gammaE = 1./6;
real nuI = 1e-8;
real sig = (1./7);
real transrate = 0.0;

if(mpirank ==0)
{

cout << "A is" << A << endl;
cout << "betaI is" << betaI << endl;
cout << "betE is" << betaE << endl;
cout << "nuS is" << nuS << endl;
cout << "nuE is" << nuE << endl;
cout << "nuR is" << nuR  << endl;
cout << "nu is" <<  mu  << endl;
cout << "alpha is" <<  alpha  << endl;
cout << "gammaR is" << gammaR  << endl;
cout << "gammaD is" << gammaD << endl;
cout << "gammaE is" << gammaE << endl;
cout << "nuI is" << nuI << endl;
cout << "sig is" << sig << endl;
cout << "transrate is" << transrate << endl;


}

Vh [real] Uk(5); // Kth iteration solution
Vh [real] Uprev(5); // Previous Time step solution
Vh [real] U(5); // Current Iteration solution

// ################################################
// Setting up Initial Condition
real tl =1000.0*NLfact;

Vh total = tl;


Vh [real] Uini(5);


func Iinitfunc = 0.1*tl * exp(-10* ( pow(x-0.5,2) + pow(y-0.5,2) ) ); // For square mesh


// Infected Population
Uini[2] = Iinitfunc;

real Iini = int2d(Ths[0])(Uini[2]);

//Exposed Population
real Eini = transrate * Iini;
Uini[1] =Eini;

//Recovered Population
real Rini= 0.0;
Uini[3] = Rini;
//Deceased Population
real Dini= 0.0;
Uini[4] = Dini;


Uini[0] = total - Uini[1] - Uini[2] - Uini[3]- Uini[4];

real Sini = int2d(Ths[0])(Uini[0]);


// ############### Saving Initial Conditions ##############################
/*
savevtk("./ini/sus_ini.vtu", Ths[0], Uini[0] , bin = 1, order = Order);

savevtk("./ini/exp_ini.vtu", Ths[0], Uini[1] , bin = 1, order = Order);

savevtk("./ini/inf_ini.vtu", Ths[0], Uini[2] , bin = 1, order = Order);

savevtk("./ini/rec_ini.vtu", Ths[0], Uini[3] , bin = 1, order = Order);

savevtk("./ini/dec_ini.vtu", Ths[0], Uini[4] , bin = 1, order = Order);
*/
// ############################################


if(mpirank == 0) cout<< "Total number of Susceptible people in sub domain 0 " << Sini << endl;


// ################################################


for (int i =0; i<5; ++i){
 Uprev[i] = Uini[i];
 Uk[i] = Uini[i];
}


real errorl2;
real tolP = getARGV("-tolP",1e-8);

real t = 0;

verbosity = 0;


ofstream ff("./compartment_scalar.dat");


ofstream fi("./N_scalar.dat");

ofstream fj("./iterScal"+ NLfact+".dat");


real[int, int] out(nt,5);

real[int, int] iterP(nt,1);
real sumPicard;


real [int,int] ttotal(nt,1);


Vh [real] ukglob(5);
Vh [real] uglob(5);
Vh Utotalsub;


// #######################  Comment out the other setups and use relevant preconditioner #######################
// ##########################################################################################
// ############################################################################################
// ##########################################################################################

// ####################### One Level RAS Preconditioner ######################

// ######## NOTE : change the maximum number of l to "1" in "for" loop line no : 373 so that coarse grid is not assembled ##################################################################################

set(S[0], sparams="-ksp_type gmres -pc_type asm -ksp_pc_side right -ksp_converged_reason");
set(E[0], sparams="-ksp_type gmres -pc_type asm -ksp_pc_side right -ksp_converged_reason");
set(I[0], sparams="-ksp_type gmres -pc_type asm -ksp_pc_side right -ksp_converged_reason");
set(R[0], sparams="-ksp_type gmres -pc_type asm -ksp_pc_side right -ksp_converged_reason");
set(D[0], sparams="-ksp_type gmres -pc_type asm -ksp_pc_side right -ksp_converged_reason");

// ####################### Two Grid RAS Preconditioner ######################

set(S, Ps, sparams = "-pc_type mg -pc_mg_type multiplicative -ksp_type fgmres -ksp_pc_side right -ksp_converged_reason -ksp_max_it 200");
set(S, 0, sparams = "-mg_coarse_ksp_type preonly -mg_coarse_pc_type lu -mg_coarse_pc_factor_mat_solver_type mumps");
set(S, level - 1, sparams = "-mg_levels_pc_type asm -mg_levels_sub_pc_type lu -mg_levels_sub_pc_factor_mat_solver_type mumps");

set(E, Pe, sparams = "-pc_type mg -pc_mg_type multiplicative -ksp_type fgmres -ksp_pc_side right -ksp_max_it 200");
set(E, 0, sparams = "-mg_coarse_ksp_type preonly -mg_coarse_pc_type lu -mg_coarse_pc_factor_mat_solver_type mumps");
set(E, level - 1, sparams = "-mg_levels_pc_type asm -mg_levels_sub_pc_type lu -mg_levels_sub_pc_factor_mat_solver_type mumps");

set(I, Pi, sparams = "-pc_type mg -pc_mg_type multiplicative -ksp_type fgmres -ksp_pc_side right -ksp_max_it 200");
set(I, 0, sparams = "-mg_coarse_ksp_type preonly -mg_coarse_pc_type lu -mg_coarse_pc_factor_mat_solver_type mumps");
set(I, level - 1, sparams = "-mg_levels_pc_type asm -mg_levels_sub_pc_type lu -mg_levels_sub_pc_factor_mat_solver_type mumps");

set(R, Pr, sparams = "-pc_type mg -pc_mg_type multiplicative -ksp_type fgmres -ksp_pc_side right -ksp_max_it 200");
set(R, 0, sparams = "-mg_coarse_ksp_type preonly -mg_coarse_pc_type lu -mg_coarse_pc_factor_mat_solver_type mumps");
set(R, level - 1, sparams = "-mg_levels_pc_type asm -mg_levels_sub_pc_type lu -mg_levels_sub_pc_factor_mat_solver_type mumps");

set(D, Pd, sparams = "-pc_type mg -pc_mg_type multiplicative -ksp_type fgmres -ksp_pc_side right -ksp_max_it 200");
set(D, 0, sparams = "-mg_coarse_ksp_type preonly -mg_coarse_pc_type lu -mg_coarse_pc_factor_mat_solver_type mumps");
set(D, level - 1, sparams = "-mg_levels_pc_type asm -mg_levels_sub_pc_type lu -mg_levels_sub_pc_factor_mat_solver_type mumps");

// ####################### Two Grid RAS V3 Preconditioner ######################

set(S, Ps, sparams = "-pc_type mg -pc_mg_type multiplicative -ksp_type fgmres -ksp_pc_side right -ksp_converged_reason -ksp_max_it 200");
set(S, 0, sparams = "-mg_coarse_ksp_type gmres -mg_coarse_pc_type hypre -mg_coarse_ksp_converged_reason");
set(S, level - 1, sparams = "-mg_levels_pc_type asm -mg_levels_sub_pc_type lu -mg_levels_sub_pc_factor_mat_solver_type mumps");

set(E, Pe, sparams = "-pc_type mg -pc_mg_type multiplicative -ksp_type fgmres -ksp_pc_side right -ksp_max_it 200");
set(E, 0, sparams = "-mg_coarse_ksp_type gmres -mg_coarse_pc_type hypre -mg_coarse_ksp_converged_reason");
set(E, level - 1, sparams = "-mg_levels_pc_type asm -mg_levels_sub_pc_type lu -mg_levels_sub_pc_factor_mat_solver_type mumps");

set(I, Pi, sparams = "-pc_type mg -pc_mg_type multiplicative -ksp_type fgmres -ksp_pc_side right -ksp_max_it 200");
set(I, 0, sparams = "-mg_coarse_ksp_type gmres -mg_coarse_pc_type hypre -mg_coarse_ksp_converged_reason");
set(I, level - 1, sparams = "-mg_levels_pc_type asm -mg_levels_sub_pc_type lu -mg_levels_sub_pc_factor_mat_solver_type mumps");

set(R, Pr, sparams = "-pc_type mg -pc_mg_type multiplicative -ksp_type fgmres -ksp_pc_side right -ksp_max_it 200");
set(R, 0, sparams = "-mg_coarse_ksp_type gmres -mg_coarse_pc_type hypre -mg_coarse_ksp_converged_reason");
set(R, level - 1, sparams = "-mg_levels_pc_type asm -mg_levels_sub_pc_type lu -mg_levels_sub_pc_factor_mat_solver_type mumps");

set(D, Pd, sparams = "-pc_type mg -pc_mg_type multiplicative -ksp_type fgmres -ksp_pc_side right -ksp_max_it 200");
set(D, 0, sparams = "-mg_coarse_ksp_type gmres -mg_coarse_pc_type hypre -mg_coarse_ksp_converged_reason");
set(D, level - 1, sparams = "-mg_levels_pc_type asm -mg_levels_sub_pc_type lu -mg_levels_sub_pc_factor_mat_solver_type mumps");

// ####################### Two Grid RAS V2     Preconditioner ######################

set(S, Ps, sparams = "-pc_type mg -pc_mg_type multiplicative -ksp_type fgmres -ksp_pc_side right -ksp_converged_reason -ksp_max_it 200");
set(S, 0, sparams = "-mg_coarse_ksp_max_it 100 -mg_coarse_ksp_type gmres -mg_coarse_pc_type asm -mg_coarse_ksp_converged_reason");
set(S, level - 1, sparams = "-mg_levels_pc_type asm -mg_levels_sub_pc_type lu -mg_levels_sub_pc_factor_mat_solver_type mumps");

set(E, Pe, sparams = "-pc_type mg -pc_mg_type multiplicative -ksp_type fgmres -ksp_pc_side right -ksp_max_it 200");
set(E, 0, sparams = "-mg_coarse_ksp_max_it 100 -mg_coarse_ksp_type gmres -mg_coarse_pc_type asm -mg_coarse_ksp_converged_reason");
set(E, level - 1, sparams = "-mg_levels_pc_type asm -mg_levels_sub_pc_type lu -mg_levels_sub_pc_factor_mat_solver_type mumps");

set(I, Pi, sparams = "-pc_type mg -pc_mg_type multiplicative -ksp_type fgmres -ksp_pc_side right -ksp_max_it 200");
set(I, 0, sparams = "-mg_coarse_ksp_max_it 100 -mg_coarse_ksp_type gmres -mg_coarse_pc_type asm -mg_coarse_ksp_converged_reason");
set(I, level - 1, sparams = "-mg_levels_pc_type asm -mg_levels_sub_pc_type lu -mg_levels_sub_pc_factor_mat_solver_type mumps");

set(R, Pr, sparams = "-pc_type mg -pc_mg_type multiplicative -ksp_type fgmres -ksp_pc_side right -ksp_max_it 200");
set(R, 0, sparams = "-mg_coarse_ksp_max_it 100 -mg_coarse_ksp_type gmres -mg_coarse_pc_type asm -mg_coarse_ksp_converged_reason");
set(R, level - 1, sparams = "-mg_levels_pc_type asm -mg_levels_sub_pc_type lu -mg_levels_sub_pc_factor_mat_solver_type mumps");

set(D, Pd, sparams = "-pc_type mg -pc_mg_type multiplicative -ksp_type fgmres -ksp_pc_side right-ksp_max_it 200");
set(D, 0, sparams = "-mg_coarse_ksp_max_it 100 -mg_coarse_ksp_type gmres -mg_coarse_pc_type asm -mg_coarse_ksp_converged_reason");
set(D, level - 1, sparams = "-mg_levels_pc_type asm -mg_levels_sub_pc_type lu -mg_levels_sub_pc_factor_mat_solver_type mumps");

// ####################### 2LV3 Preconditioner ######################


// ####################### 2LV3 Preconditioner ######################

real tt1, tt2, tp1,tp2;

macro Grad(u) [dx(u), dy(u)] // EOM


Vh vS,vE, vI, vR, vD;
Vh Scur, Ecur,Icur, Rcur, Dcur;

Vh Sprev,Eprev,Iprev,Rprev,Dprev, Nprev;

Vh Sk,Ek,Ik,Rk,Dk, Nk;

Vh rhsS,solS, rhsE, solE, rhsI,solI, rhsR,solR, rhsD,solD;

real [int] diff(Vh.ndof);

real den, glob, locint;

real [int] locPETSc;

real tc1,tc2,tc3,tc4,tc5,tc6;


// Time Loop
for (int i = 0; i < nt ; ++i)
{

    // Previous Time step Solutions
    t = (i+1)*deltaT;

    tt1 = mpiWtime();

    Sprev = Uprev[0];
    Eprev = Uprev[1];
    Iprev = Uprev[2];
    Rprev = Uprev[3];
    Dprev = Uprev[4];


    Nprev = Sprev + Eprev + Iprev + Rprev + Dprev;


    for (int k =0; k <50 ; ++k)
    {
            // Kth Iteration Solutions for Newton/Picard Linearization


        tp1 = mpiWtime();


        errorl2 = 0.0;

        Sk = Uk[0];
        Ek = Uk[1];
        Ik = Uk[2];
        Rk = Uk[3];
        Dk = Uk[4];


        Nk = Sk+Ek+Ik+Rk+Dk;

        // ################ Loop for adding coarse space ####################################################



        tc1 = mpiWtime();
        for (int l =0; l< level ; l++)

        {


            fespace Whs(Ths[l], Pk);


            // ########################Implicit - Weak Forms ################################################


            varf susceptible(Scur, vS) = int2d(Ths[l])(Scur * vS + deltaT * ( ( 1.0- A/Nk) * betaI * Scur * Ik * vS)
                                                   + deltaT * ( ( 1.0- A/Nk) * betaE * Scur * Ek * vS)
                                                   + deltaT * ( Nk * mu * Scur * vS)
                                                   + deltaT * ( Nk * nuS * Grad(Scur)'*Grad(vS))  )
                                                   + int2d(Ths[l])(Sprev * vS + deltaT*alpha*Nk*vS) ;



            varf exposed(Ecur, vE) = int2d(The[l])(Ecur * vE -  deltaT * ( ( 1.0- A/Nk) * betaE * Sk * Ecur * vE)
                                                   + deltaT * ( (sig + gammaE) *  Ecur * vE)
                                                   + deltaT * ( Nk * mu * Ecur * vE)
                                                   + deltaT * ( Nk * nuE *  (Grad(Ecur)'*Grad(vE)) ) )
                                                   + int2d(Ths[l])( Eprev * vE + deltaT * ( ( 1.0- A/Nk) * betaI * Sk * Ik * vE)  ) ;



            varf infected(Icur, vI) = int2d(Thi[l])(Icur * vI + deltaT * ( (gammaD + gammaR)*Icur * vI)
                                                   + deltaT * ( Nk * mu * Icur * vI)
                                                   + deltaT * ( Nk * nuI *  (Grad(Icur)'*Grad(vI)) ) )
                                                   + int2d(Ths[l])(Iprev * vI + deltaT * ( sig * Ek * vI) );


            varf recovered(Rcur, vR) = int2d(Thr[l])( Rcur * vR + deltaT * ( Nk * mu * Rcur * vR)
                                                   + deltaT * ( Nk * nuR *  (Grad(Rcur)'*Grad(vR)) ) )
                                                   + int2d(Ths[l])(Rprev * vR + deltaT * ( gammaR * Ik * vR) + deltaT * ( gammaE *Ek * vR) );




            varf deceased(Dcur, vD) = int2d(Thd[l])( Dcur * vD ) + int2d(Ths[l])( Dprev * vD + deltaT * ( gammaD * Ik * vD) );




            // ############################################################################


            // ################ IMEX - Weak Forms ##############################################


            /*
            varf susceptible(Scur, vS) = int2d(Ths[l])(Scur * vS
                                                   + deltaT * ( Nk * nuS * Grad(Scur)'*Grad(vS))  )
                                                   + int2d(Ths[l])(Sprev * vS - deltaT * ( ( 1.0- A/Nprev) * betaI * Sprev * Iprev * vS)
                                                   - deltaT * ( ( 1.0- A/Nprev) * betaE * Sprev * Eprev * vS) );



            varf exposed(Ecur, vE) = int2d(Ths[l])(Ecur * vE
                                                   + deltaT * ( Nk * nuE *  (Grad(Ecur)'*Grad(vE)) ) )
                                                   + int2d(Ths[l])( Eprev * vE + deltaT * ( ( 1.0- A/Nprev) * betaI * Sprev * Iprev * vE)
                                                    + deltaT * ( ( 1.0- A/Nprev) * betaE * Sprev * Eprev * vE)
                                                   - deltaT * ( (sig + gammaE) *  Eprev * vE));



            varf infected(Icur, vI) = int2d(Ths[l])(Icur * vI
                                                   + deltaT * ( Nk * nuI *  (Grad(Icur)'*Grad(vI)) ) )
                                                   + int2d(Ths[l])( Iprev * vI + deltaT * ( sig * Eprev * vI)
                                                    - deltaT * ( (gammaD + gammaR)*Iprev * vI));


            varf recovered(Rcur, vR) = int2d(Ths[l])( Rcur * vR
                                                   + deltaT * ( Nk * nuR *  (Grad(Rcur)'*Grad(vR)) ) )
                                                   + int2d(Ths[l])(Rprev * vR + deltaT * ( gammaR * Iprev * vR)
                                                    + deltaT * ( gammaE *Eprev * vR) );




            varf deceased(Dcur, vD) = int2d(Ths[l])( Dcur * vD ) + int2d(Ths[l])( Dprev * vD + deltaT * ( gammaD * Iprev * vD) );
            */

// ############################################################################


            S[l] = susceptible(Whs,Whs, tgv = -1);
            E[l] = exposed(Whs,Whs, tgv = -1);
            I[l] = infected(Whs,Whs, tgv = -1);
            R[l] = recovered(Whs,Whs, tgv = -1);
            D[l] = deceased(Whs,Whs, tgv = -1);


            if(l==0)
            {
                rhsS[] = susceptible(0,Whs, tgv = -1);
                rhsE[] = exposed(0,Whs, tgv = -1);
                rhsI[] = infected(0,Whs, tgv = -1);
                rhsR[] = recovered(0,Whs, tgv = -1);
                rhsD[] = deceased(0,Whs, tgv = -1);

            }

        }
        tc2 = mpiWtime();
        cout << "time for assembly " << tc2-tc1 << endl;



        tc3 = mpiWtime();
        set(S[0], setup = 1);
        U[0][] = S[0]^(-1) * rhsS[];
        Sk = U[0];

        set(E[0], setup = 1);
        U[1][] = E[0]^(-1) * rhsE[];
        Ek = U[1];

        set(I[0], setup = 1);
        U[2][] = I[0]^(-1) * rhsI[];
        Ik = U[2];

        set(R[0], setup = 1);
        U[3][] = R[0]^(-1) * rhsR[];
        Rk = U[3];

        set(D[0], setup = 1);
        U[4][] = D[0]^(-1) * rhsD[];
        Dk = U[4];

        tc4 = mpiWtime();

        macro def(u)u
        /*
        plotMPI(Ths[0], Sk, Pk, def, real, cmm = "Sk")
        plotMPI(Ths[0], Ek, Pk, def, real, cmm = "Ek")
        plotMPI(Ths[0], Ik, Pk, def, real, cmm = "Ik")
        plotMPI(Ths[0], Rk, Pk, def, real, cmm = "Rk")
        plotMPI(Ths[0], Dk, Pk, def, real, cmm = "Dk")
        */


// ############################################################################


// ############################################################################

        diff = 0;
        errorl2 = 0;
        den = 0;
        for(int j=0;j<5;++j)
        {

        diff = U[j][] - Uk[j][];

        den += S[0](Uprev[j][], Uprev[j][]);
        errorl2 += S[0](diff, diff);

        }

        errorl2 = sqrt(errorl2)/sqrt(den);
//     ##########################################################################

        // Update

        tc5 = mpiWtime();
        for(int j=0;j<5;++j)
        {

            Uk[j] = U[j];
        }
        tc6 = mpiWtime();

        tp2 = mpiWtime();

        if(mpirank ==0)
        {
            cout << "iteration " << k +"     "<< errorl2 << endl;
            cout << "time for 1 Picards iteration " << tp2 - tp1 << endl;
        }

        // ####################################
        if(errorl2 < tolP)
        {
            iterP(i,0) = k;
            break;
        }


    } // Finished Picard Loop


    sumPicard += iterP(i,0);
// Update new timestep solution

    for(int j=0;j<5;++j)
    {

        Uprev[j] = U[j];

    }


    locint = 0;
    glob = 0;

    Utotalsub = U[0] + U[1] + U[2] + U[3] + U[4];

    /*
    if(i % 10 == 0)
    {
        savevtk("./output/u_susceptible.vtu", Ths[0], U[0] , bin = 1, order = Order, append = true);
        savevtk("./output/u_exposed.vtu", Ths[0], U[1] , bin = 1, order = Order, append = true);
        savevtk("./output/u_infected.vtu", Ths[0], U[2] , bin = 1, order = Order, append = true);
        savevtk("./output/u_recovered.vtu", Ths[0], U[3] , bin = 1, order = Order, append = true);
        savevtk("./output/u_deceased.vtu", Ths[0], U[4] , bin = 1, order = Order, append = true);
        savevtk("./output/u_total.vtu", Ths[0], Utotalsub , bin = 1, order = Order, append = true);

    }

    */

    for(int l=0;l<5; ++l)
    {

        ChangeNumbering(S[0], U[l][], locPETSc);
        ChangeNumbering(S[0], U[l][], locPETSc, inverse = true, exchange = false);

        locint = int2d(Ths[0])(U[l]);

        mpiAllReduce(locint,glob, mpiCommWorld, mpiSUM);

        out(i,l) = glob;

    }


// Calculating N over whole domain

    ChangeNumbering(S[0], Utotalsub[], locPETSc);
    ChangeNumbering(S[0], Utotalsub[], locPETSc, inverse = true, exchange = false);

    locint = int2d(Ths[0])(Utotalsub);

    mpiAllReduce(locint,glob, mpiCommWorld, mpiSUM);

    ttotal(i,0) = glob;


    tt2 = mpiWtime();

    if(mpirank == 0)

    {

    cout << "Time step number " << i + " time " << t + "days" << endl;
    cout << "Time taken for 1 timestep" << tt2-tt1 << endl;

    }

// End of Time loop

}


t2 = mpiWtime();

if(mpirank ==0)
{
    cout << "Total Time taken  " << t2-t1 << endl;
    cout << "Average Number of Picard Iteration  " << sumPicard/nt << endl;

}


ff << out << endl;
//fg << node1 << endl;
//fh << node2 << endl;
fi << ttotal << endl;
fj << iterP << endl;


//cout << "############# END in ########### " << mpirank << endl;



// ###########################################################################################################################


