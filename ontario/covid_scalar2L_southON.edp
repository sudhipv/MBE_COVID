
// Sudhi P V
// Civil and Environmental Engineering
// Carleton University

// Code used for Realstic Southern Ontario Simulations

//##################################################
// Southern Ontario Mesh with Two Level DD - Scalar PDE -With Spatio-temporal beta parameter
// Algebraic Multigrid Coarse solver
//##################################################

// Mesh from gmsh

bool debug = true;

load "PETSc"
macro dimension()2// EOM            // 2D or 3D
include "macro_ddm.idp"

real t1,t2;

t1 = mpiWtime();


// For solution output in vtk format
load "iovtk"
int[int] Order = [1]; // 1 - P1 lagrange elements 0 - P0


load "gmsh"

real t = 0.0;
real T = getARGV("-T",180.0);
real deltaT = getARGV("-deltaT",0.1);

real nt = lround(T/deltaT);

if(mpirank == 0) cout << "T is " << T << " dt is " << deltaT << " nt is "<< nt << endl;



int level = 2;
int s = getARGV("-s",2);
func Pk = P1;                       // finite element space

mesh [int] Ths(level);
mesh [int] The(level);
mesh [int] Thi(level);
mesh [int] Thr(level);
mesh [int] Thd(level);


Ths[level-1] = gmshload("./mesh/south/south_coarse.msh");
The[level-1] = Ths[level-1];
Thi[level-1] = Ths[level-1];
Thr[level-1] = Ths[level-1];
Thd[level-1] = Ths[level-1];


Mat[int] S(level);
Mat[int] E(level);
Mat[int] I(level);
Mat[int] R(level);
Mat[int] D(level);

matrix[int] Ps(level - 1);
matrix[int] Pe(level - 1);
matrix[int] Pi(level - 1);
matrix[int] Pr(level - 1);
matrix[int] Pd(level - 1);

if(mpirank == 0) cout << "Number of Vertices in coarse grid " << "  " + Ths[level-1].nv << endl;


buildMatRecursive(Ths, s, level, Ps, S, Pk, mpiCommWorld);
buildMatRecursive(The, s, level, Pe, E, Pk, mpiCommWorld);
buildMatRecursive(Thi, s, level, Pi, I, Pk, mpiCommWorld);
buildMatRecursive(Thr, s, level, Pr, R, Pk, mpiCommWorld);
buildMatRecursive(Thd, s, level, Pd, D, Pk, mpiCommWorld);

if(mpirank == 0) cout << "Number of Vertices in fine mesh for process  "+ mpirank << "  " + Ths[0].nv << endl;


fespace Vh(Ths[0], Pk);


// Parameters

real popfact = 1;
real areafact = 8750;
real A = 8.9e-3;

// ############## Eastern ##############################  Western ############################### Central ############################################################################temporal ###############################
func betaE = ( ( 2.69e-3 /(1+ exp(-5*(x-(-78.4)))) ) + ( 3.80e-3/(1+ exp(10*(x-(-80.25)))) ) + ( 6.7e-4 * ( 1 - 1/ (1+ exp(-5*((x-(-78.4))))) - 1/ (1+ exp(10*(x-(-80.25)))) ) ) ) * (0.101 - 0.05/(1 + exp((130-t)/1)) ); // Sum of West, east, central
func betaI = betaE; //


real nuS = 4.5e-7;
real nuE = 4.5e-7;
real nuR = 4.5e-7;
real mu = 0.0;
real alpha = 0.0;
real gammaR = (1./11);
real gammaD = (1./750);
real gammaE = 1./15;
real nuI = 1e-9; //1e-4
real sig = (1./5);
real transrate = 1;


if(mpirank ==0)
{

cout << "A is" << A << endl;
cout << "betaI is" << betaI << endl;
cout << "betE is" << betaE << endl;
cout << "nuS is" << nuS << endl;
cout << "nuE is" << nuE << endl;
cout << "nuR is" << nuR  << endl;
cout << "nu is" <<  mu  << endl;
cout << "alpha is" <<  alpha  << endl;
cout << "gammaR is" << gammaR  << endl;
cout << "gammaD is" << gammaD << endl;
cout << "gammaE is" << gammaE << endl;
cout << "nuI is" << nuI << endl;
cout << "sig is" << sig << endl;
cout << "transrate is" << transrate << endl;


}

Vh [real] Uk(5); // Kth iteration solution
Vh [real] Uprev(5); // Previous Time step solution
Vh [real] U(5); // Current Iteration solution

// ######################################################################################
// ######################### Setting up Initial Condition ###############################
// ######################################################################################



Vh [real] Uini(5);

string s1,s2,s3,s4;

string std;

real [int,int] k(34,2);


// Locations on 34 counties
string loc = "./mesh/phu_loc.txt";

// Infected Recovered Deceased Total Population Data on each Counties
string data = "./mesh/phu_2020_09_01.txt";

// Area of each PHU
string area = "./mesh/Area_PHU.txt";


ifstream file1(loc);

real i;

for (int i = 0; i < 34 ; i++)
{

file1 >> s1 >> s2;

k(i,0) = atof(s1);
k(i,1) = atof(s2);

}


real [int,int] cases(34,6);

// Active Recovered Deceased Total


ifstream file2(data);

for (int i = 0; i < 34 ; i++)
{

file2 >> s1 >> s2 >> s3 >> s4;


cases(i,2) = atof(s1);
cases(i,3) = atof(s2);
cases(i,4) = atof(s3);
cases(i,5) = atof(s4);

}


ifstream file3(area);

real[int,int] areaphu(34,1);

for (int i = 0; i < 34 ; i++)
{

file3 >> s1;

areaphu(i,0) = atof(s1);


}


// Finding out the value of Susceptible and Exposed for Each PHU

// To verify the total initial and interpolated matches
real sumS = 0;
real sumE = 0;
real sumI = 0;
real sumR = 0;
real sumD = 0;


real sumSS = 0;
real sumSE = 0;
real sumSI = 0;
real sumSR = 0;
real sumSD = 0;


for (int i = 0; i < 34 ; i++)
{


cases(i,1) = round(cases(i,2) * transrate);

cases(i,0) = cases(i,5)  - cases(i,1) - cases(i,2) - cases(i,3) - cases(i,4);

sumS = sumS + cases(i,0);
sumE = sumE + cases(i,1);
sumI = sumI + cases(i,2);
sumR = sumR + cases(i,3);
sumD = sumD + cases(i,4);

// For only Southern Ontario
if(i>6)
{

sumSS = sumSS + cases(i,0);
sumSE = sumSE + cases(i,1);
sumSI = sumSI + cases(i,2);
sumSR = sumSR + cases(i,3);
sumSD = sumSD + cases(i,4);

}


}


// Gaussian Densities

string Barea = "./mesh/B_area.txt";  // Optimized to get area under pdf very near to 1 minimum 0.97 and max 1.06

real [int,int] B(34,1);

ifstream file4(Barea);

for (int i = 0; i < 34 ; i++)
{

file4 >> B(i,0);

}

Vh Sinitfunc = 0;

Vh Einitfunc = 0;

Vh Iinitfunc = 0;

Vh Rinitfunc = 0;

Vh Dinitfunc = 0;

Vh Tinitfunc = 0;


Vh GaussS,GaussE,GaussI,GaussR, GaussD, GaussT;

Vh check;

real AmpS = 0;
real AmpE = 0;
real AmpI = 0;
real AmpR = 0;
real AmpD = 0;

real AmpT = 0;


for (int j = 7; j < 34; j++ )
{

AmpS = 2*cases(j,0)/(popfact* areaphu(j,0));


AmpE = 2*cases(j,1)/(popfact* areaphu(j,0));


AmpI = 2*cases(j,2)/(popfact* areaphu(j,0));


AmpR = 2*cases(j,3)/(popfact* areaphu(j,0));


AmpD = 2*cases(j,4)/(popfact* areaphu(j,0));


AmpT = 2*cases(j,5)/(popfact* areaphu(j,0));



GaussS = AmpS * exp(- ( (x - k(j,0))^2 + (y-k(j,1))^2 )  / (2.0 * B(j,0)^2) );

GaussE = AmpE * exp(- ( (x - k(j,0))^2 + (y-k(j,1))^2 )  / (2.0 * B(j,0)^2) );

GaussI = AmpI * exp(- ( (x - k(j,0))^2 + (y-k(j,1))^2 )  / (2.0 * B(j,0)^2) );

GaussR = AmpR * exp(- ( (x - k(j,0))^2 + (y-k(j,1))^2 )  / (2.0 * B(j,0)^2) );

GaussD = AmpD * exp(- ( (x - k(j,0))^2 + (y-k(j,1))^2 )  / (2.0 * B(j,0)^2) );

GaussT = AmpT * exp(- ( (x - k(j,0))^2 + (y-k(j,1))^2 )  / (2.0 * B(j,0)^2) );


Sinitfunc = Sinitfunc + GaussS;

Einitfunc = Einitfunc + GaussE;

Iinitfunc = Iinitfunc + GaussI;

Rinitfunc = Rinitfunc + GaussR;

Dinitfunc = Dinitfunc + GaussD;

Tinitfunc = Tinitfunc + GaussT;

}


Uini[0] = Sinitfunc;
Uini[1] = Einitfunc;
Uini[2] = Iinitfunc;
Uini[3] = Rinitfunc;
Uini[4] = Dinitfunc;

real Sini = popfact * int2d(Ths[0])(Uini[0])*areafact;
real Eini = popfact * int2d(The[0])(Uini[1])*areafact;
real Iini = popfact * int2d(Thi[0])(Uini[2])*areafact;
real Rini = popfact * int2d(Thr[0])(Uini[3])*areafact;
real Dini = popfact * int2d(Thd[0])(Uini[4])*areafact;


// ############### Saving Initial Conditions ##############################

/*
savevtk("./ini/sus_ini.vtu", Ths[0], Uini[0] , bin = 1, order = Order);

savevtk("./ini/exp_ini.vtu", The[0], Uini[1] , bin = 1, order = Order);

savevtk("./ini/inf_ini.vtu", Thi[0], Uini[2] , bin = 1, order = Order);

savevtk("./ini/rec_ini.vtu", Thr[0], Uini[3] , bin = 1, order = Order);

savevtk("./ini/dec_ini.vtu", Thd[0], Uini[4] , bin = 1, order = Order);
*/

// ############################################


if(mpirank == 0)
{

cout<< "Susceptible Projected " << Sini << endl;
cout<< "Exposed Projected " << Eini << endl;
cout<< "Infected Projected " << Iini << endl;
cout<< "Recovered Projected " << Rini << endl;
cout<< "Deceased Projected " << Dini << endl;

cout<< "Susceptible Initial " << sumSS << endl;
cout<< "Exposed Initial " << sumSE << endl;
cout<< "Infected Initial " << sumSI << endl;
cout<< "Recovered Initial " << sumSR << endl;
cout<< "Deceased Initial " << sumSD << endl;
//cout<< "Total Ontario Original 14864428" << endl;
}


// ##########################################################################################
// ##########################################################################################
// ##########################################################################################


for (int i =0; i<5; ++i){
 Uprev[i] = Uini[i];
 Uk[i] = Uini[i];
}


real errorl2;
real tolP = getARGV("-tolP",1e-8);

verbosity = 0;


ofstream ff("./compartment_scal.dat");

ofstream fi("./N_scal.dat");

ofstream fj("./iterScal.dat");


real[int, int] out(nt,5);

real[int, int] iterP(nt,1);
real sumPicard;

real [int,int] ttotal(nt,1);



Vh [real] ukglob(5);
Vh [real] uglob(5);
Vh Utotalsub;

set(S, Ps, sparams = "-pc_type mg -pc_mg_type multiplicative -ksp_type fgmres -ksp_converged_reason -ksp_max_it 200");
set(S, 0, sparams = "-mg_coarse_ksp_type gmres -mg_coarse_pc_type hypre -mg_coarse_ksp_converged_reason");
set(S, level - 1, sparams = "-mg_levels_pc_type asm -mg_levels_sub_pc_type lu -mg_levels_sub_pc_factor_mat_solver_type mumps");

set(E, Pe, sparams = "-pc_type mg -pc_mg_type multiplicative -ksp_type fgmres -ksp_max_it 200");
set(E, 0, sparams = "-mg_coarse_ksp_type gmres -mg_coarse_pc_type hypre -mg_coarse_ksp_converged_reason");
set(E, level - 1, sparams = "-mg_levels_pc_type asm -mg_levels_sub_pc_type lu -mg_levels_sub_pc_factor_mat_solver_type mumps");

set(I, Pi, sparams = "-pc_type mg -pc_mg_type multiplicative -ksp_type fgmres -ksp_max_it 200");
set(I, 0, sparams = "-mg_coarse_ksp_type gmres -mg_coarse_pc_type hypre -mg_coarse_ksp_converged_reason");
set(I, level - 1, sparams = "-mg_levels_pc_type asm -mg_levels_sub_pc_type lu -mg_levels_sub_pc_factor_mat_solver_type mumps");

set(R, Pr, sparams = "-pc_type mg -pc_mg_type multiplicative -ksp_type fgmres -ksp_max_it 200");
set(R, 0, sparams = "-mg_coarse_ksp_type gmres -mg_coarse_pc_type hypre -mg_coarse_ksp_converged_reason");
set(R, level - 1, sparams = "-mg_levels_pc_type asm -mg_levels_sub_pc_type lu -mg_levels_sub_pc_factor_mat_solver_type mumps");

set(D, Pd, sparams = "-pc_type mg -pc_mg_type multiplicative -ksp_type fgmres -ksp_max_it 200");
set(D, 0, sparams = "-mg_coarse_ksp_type gmres -mg_coarse_pc_type hypre -mg_coarse_ksp_converged_reason");
set(D, level - 1, sparams = "-mg_levels_pc_type asm -mg_levels_sub_pc_type lu -mg_levels_sub_pc_factor_mat_solver_type mumps");


real tt1, tt2, tp1,tp2;

macro Grad(u) [dx(u), dy(u)] // EOM


Vh vS,vE, vI, vR, vD;
Vh Scur, Ecur,Icur, Rcur, Dcur;

Vh Sprev,Eprev,Iprev,Rprev,Dprev, Nprev;

Vh Sk,Ek,Ik,Rk,Dk, Nk;

Vh rhsS,solS, rhsE, solE, rhsI,solI, rhsR,solR, rhsD,solD;

real [int] diff(Vh.ndof);

real den, glob, locint;

real [int] locPETSc;


// Time Loop
for (int i = 0; i < nt ; ++i)
{

    // Previous Time step Solutions
    t = (i+1)*deltaT;

    tt1 = mpiWtime();

    if(mpirank ==0) cout << "betaI is" << betaI<<endl;

    Sprev = Uprev[0];
    Eprev = Uprev[1];
    Iprev = Uprev[2];
    Rprev = Uprev[3];
    Dprev = Uprev[4];


    Nprev = Sprev + Eprev + Iprev + Rprev + Dprev;


    for (int k =0; k <50 ; ++k)
    {
            // Kth Iteration Solutions for Newton/Picard Linearization


        tp1 = mpiWtime();


        errorl2 = 0.0;

        Sk = Uk[0];
        Ek = Uk[1];
        Ik = Uk[2];
        Rk = Uk[3];
        Dk = Uk[4];


        Nk = Sk+Ek+Ik+Rk+Dk;

        // ################ Loop for adding coarse space ####################################################

        for (int l =0; l< level ; l++)

        {


            fespace Whs(Ths[l], Pk);


            // ########################Implicit - Weak Forms ################################################


            varf susceptible(Scur, vS) = int2d(Ths[l])(Scur * vS + deltaT * ( ( 1.0- A/Nk) * betaI * Scur * Ik * vS)
                                                   + deltaT * ( ( 1.0- A/Nk) * betaE * Scur * Ek * vS)
                                                   + deltaT * ( Nk * mu * Scur * vS)
                                                   + deltaT * ( Nk * nuS * Grad(Scur)'*Grad(vS))  )
                                                   + int2d(Ths[l])(Sprev * vS + deltaT*alpha*Nk*vS) ;



            varf exposed(Ecur, vE) = int2d(Ths[l])(Ecur * vE -  deltaT * ( ( 1.0- A/Nk) * betaE * Sk * Ecur * vE)
                                                   + deltaT * ( (sig + gammaE) *  Ecur * vE)
                                                   + deltaT * ( Nk * mu * Ecur * vE)
                                                   + deltaT * ( Nk * nuE *  (Grad(Ecur)'*Grad(vE)) ) )
                                                   + int2d(Ths[l])( Eprev * vE + deltaT * ( ( 1.0- A/Nk) * betaI * Sk * Ik * vE)  ) ;



            varf infected(Icur, vI) = int2d(Ths[l])(Icur * vI + deltaT * ( (gammaD + gammaR)*Icur * vI)
                                                   + deltaT * ( Nk * mu * Icur * vI)
                                                   + deltaT * ( Nk * nuI *  (Grad(Icur)'*Grad(vI)) ) )
                                                   + int2d(Ths[l])(Iprev * vI + deltaT * ( sig * Ek * vI) );


            varf recovered(Rcur, vR) = int2d(Ths[l])( Rcur * vR + deltaT * ( Nk * mu * Rcur * vR)
                                                   + deltaT * ( Nk * nuR *  (Grad(Rcur)'*Grad(vR)) ) )
                                                   + int2d(Ths[l])(Rprev * vR + deltaT * ( gammaR * Ik * vR) + deltaT * ( gammaE *Ek * vR) );




            varf deceased(Dcur, vD) = int2d(Ths[l])( Dcur * vD ) + int2d(Ths[l])( Dprev * vD + deltaT * ( gammaD * Ik * vD) );


            // ############################################################################


            // ################ IMEX - Weak Forms ##############################################
            /*

            varf susceptible(Scur, vS) = int2d(Ths[l])(Scur * vS
                                                   + deltaT * ( Nk * nuS * Grad(Scur)'*Grad(vS))  )
                                                   + int2d(Ths[l])(Sprev * vS - deltaT * ( ( 1.0- A/Nprev) * betaI * Sprev * Iprev * vS)
                                                   - deltaT * ( ( 1.0- A/Nprev) * betaE * Sprev * Eprev * vS) );



            varf exposed(Ecur, vE) = int2d(Ths[l])(Ecur * vE
                                                   + deltaT * ( Nk * nuE *  (Grad(Ecur)'*Grad(vE)) ) )
                                                   + int2d(Ths[l])( Eprev * vE + deltaT * ( ( 1.0- A/Nprev) * betaI * Sprev * Iprev * vE)
                                                    + deltaT * ( ( 1.0- A/Nprev) * betaE * Sprev * Eprev * vE)
                                                   - deltaT * ( (sig + gammaE) *  Eprev * vE));



            varf infected(Icur, vI) = int2d(Ths[l])(Icur * vI
                                                   + deltaT * ( Nk * nuI *  (Grad(Icur)'*Grad(vI)) ) )
                                                   + int2d(Ths[l])( Iprev * vI + deltaT * ( sig * Eprev * vI)
                                                    - deltaT * ( (gammaD + gammaR)*Iprev * vI));


            varf recovered(Rcur, vR) = int2d(Ths[l])( Rcur * vR
                                                   + deltaT * ( Nk * nuR *  (Grad(Rcur)'*Grad(vR)) ) )
                                                   + int2d(Ths[l])(Rprev * vR + deltaT * ( gammaR * Iprev * vR)
                                                    + deltaT * ( gammaE *Eprev * vR) );




            varf deceased(Dcur, vD) = int2d(Ths[l])( Dcur * vD ) + int2d(Ths[l])( Dprev * vD + deltaT * ( gammaD * Iprev * vD) );

            */

// ############################################################################




            S[l] = susceptible(Whs,Whs, tgv = -1);
            E[l] = exposed(Whs,Whs, tgv = -1);
            I[l] = infected(Whs,Whs, tgv = -1);
            R[l] = recovered(Whs,Whs, tgv = -1);
            D[l] = deceased(Whs,Whs, tgv = -1);


            if(l==0)
            {
                rhsS[] = susceptible(0,Whs, tgv = -1);
                rhsE[] = exposed(0,Whs, tgv = -1);
                rhsI[] = infected(0,Whs, tgv = -1);
                rhsR[] = recovered(0,Whs, tgv = -1);
                rhsD[] = deceased(0,Whs, tgv = -1);

            }



        }


        set(S[0], setup = 1);
        U[0][] = S[0]^(-1) * rhsS[];
        Sk = U[0];

        set(E[0], setup = 1);
        U[1][] = E[0]^(-1) * rhsE[];
        Ek = U[1];

        set(I[0], setup = 1);
        U[2][] = I[0]^(-1) * rhsI[];
        Ik = U[2];

        set(R[0], setup = 1);
        U[3][] = R[0]^(-1) * rhsR[];
        Rk = U[3];

        set(D[0], setup = 1);
        U[4][] = D[0]^(-1) * rhsD[];
        Dk = U[4];












// ############################################################################


// ############################################################################

        diff = 0;
        errorl2 = 0;
        den = 0;
        for(int j=0;j<5;++j)
        {

        diff = U[j][] - Uk[j][];

        den += S[0](Uprev[j][], Uprev[j][]);
        errorl2 += S[0](diff, diff);

        }

        errorl2 = sqrt(errorl2)/sqrt(den);
//     ##########################################################################

        // Update

        for(int j=0;j<5;++j)
        {

            Uk[j] = U[j];
        }


        tp2 = mpiWtime();

        if(mpirank ==0)
        {
            cout << "iteration " << k +"     "<< errorl2 << endl;
            cout << "time for 1 Picards iteration " << tp2 - tp1 << endl;
        }

        // ####################################
        if(errorl2 < tolP)
        {
            iterP(i,0) = k;
            break;
        }


    } // Finished Picard Loop


    sumPicard += iterP(i,0);
// Update new timestep solution

    for(int j=0;j<5;++j)
    {

        Uprev[j] = U[j];

    }


    locint = 0;
    glob = 0;

    Utotalsub = U[0] + U[1] + U[2] + U[3] + U[4];


    if(i % 50 == 0)
    {
        //savevtk("./output/u_susceptible.vtu", Ths[0], U[0] , bin = 1, order = Order, append = true);
        //savevtk("./output/u_exposed.vtu", Ths[0], U[1] , bin = 1, order = Order, append = true);
        savevtk("./output/u_infected.vtu", Ths[0], U[2] , bin = 1, order = Order, append = true);
        //savevtk("./output/u_recovered.vtu", Ths[0], U[3] , bin = 1, order = Order, append = true);
        savevtk("./output/u_deceased.vtu", Ths[0], U[4] , bin = 1, order = Order, append = true);
        //savevtk("./output/u_total.vtu", Ths[0], Utotalsub , bin = 1, order = Order, append = true);

    }


    for(int l=0;l<5; ++l)
    {

        ChangeNumbering(S[0], U[l][], locPETSc);
        ChangeNumbering(S[0], U[l][], locPETSc, inverse = true, exchange = false);

        locint = int2d(Ths[0])(U[l])*areafact;

        mpiAllReduce(locint,glob, mpiCommWorld, mpiSUM);

        out(i,l) = glob*popfact;


    }


// Calculating N over whole domain

    ChangeNumbering(S[0], Utotalsub[], locPETSc);
    ChangeNumbering(S[0], Utotalsub[], locPETSc, inverse = true, exchange = false);

    locint = int2d(Ths[0])(Utotalsub)*areafact;

    mpiAllReduce(locint,glob, mpiCommWorld, mpiSUM);

    ttotal(i,0) = glob*popfact;


    tt2 = mpiWtime();

    if(mpirank == 0)

    {

    cout << "Time step number " << i + " time " << t + "days" << endl;
    cout << "Time taken for 1 timestep" << tt2-tt1 << endl;

    }

// End of Time loop

}


t2 = mpiWtime();

if(mpirank ==0)
{
    cout << "Total Time taken  " << t2-t1 << endl;
    cout << "Average Number of Picard Iteration  " << sumPicard/nt << endl;

}


ff << out << endl;
fi << ttotal << endl;
fj << iterP << endl;


//cout << "############# END in ########### " << mpirank << endl;

// ###########################################################################################################################

//ENDIFMACRO
